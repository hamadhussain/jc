// // // This is your Prisma schema file,
// // // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// // datasource db {
// //   provider = "mongodb"
// //   url      = env("DATABASE_URL")
// // }

// // generator client {
// //   provider = "prisma-client-js"
// // }

// // model Post {
// //   id       String    @id @default(auto()) @map("_id") @db.ObjectId
// //   slug     String    @unique
// //   title    String
// //   body     String
// //   author   User      @relation(fields: [authorId], references: [id])
// //   authorId String    @db.ObjectId
// //   comments Comment[]
// // }

// // model User {
// //   id      String   @id @default(auto()) @map("_id") @db.ObjectId
// //   email   String   @unique
// //   name    String?
// //   address Address?
// //   posts   Post[]
// // }

// // model Comment {
// //   id      String @id @default(auto()) @map("_id") @db.ObjectId
// //   comment String
// //   post    Post   @relation(fields: [postId], references: [id])
// //   postId  String @db.ObjectId
// // }

// // // Address is an embedded document
// // type Address {
// //   street String
// //   city   String
// //   state  String
// //   zip    String
// // }










// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Product {
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   description String
//   price    Float
//   category String  // e.g., "jacket", "hoodie"
//   images   String[] // URLs or paths to product images
//   stock    Int     // Quantity available
// }

// model User {
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   email    String   @unique
//   name     String?
//   address  Address?
//   orders    Order[]
// }

// // Order model to track user purchases
// model Order {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   user       User     @relation(fields: [userId], references: [id])
//   products   Product[]
//   total      Float    // Total price of the order
//   createdAt  DateTime @default(now())
// }

// // Address is an embedded document
// type Address {
//   street String
//   city   String
//   state  String
//   zip    String
// }













datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String    // e.g., "jacket", "hoodie"
  images      String  // URLs or paths to product images
  stock       Int       // Quantity available
  orders      OrderProduct[] // Relation to OrderProduct
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  name     String?
  address  Address?
  orders   Order[]
}

model Order {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  products   OrderProduct[] 
  total      Float        
  createdAt  DateTime      @default(now())
}

model OrderProduct {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String   @db.ObjectId
  order    Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product  Product   @relation(fields: [productId], references: [id])
  quantity Int      // Quantity of the product in the order
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}
